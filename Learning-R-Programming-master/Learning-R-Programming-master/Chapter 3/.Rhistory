objects()
x <- c(1,2,3)
y <- c("a","b","c")
z <- list(m=1.5,n=c("x","y","z"))
objects()
ls()
objects()
x <- c(1,2,3)
y <- c("a","b","c")
z <- list(m=1.5,n=c("x","y","z"))
objects()
ls()
x
str(x)
str(1:30)
z
str(z)
nested_list <- list(m=1:15,n=list("a",c(1,2,3)),p=list(x=1:10,y=c("a","b")),q=list(x=0:9,y=c("c","d")))
nested_list
str(nested_list)
ls.str()
ls.str(mode="list")
ls.str(pattern="^\\w$")
ls.str(pattern = "^\\w$",mode="list")
ls()
rm(x)
ls()
rm(y,z)
ls()
rm(x)
p <-1:10
q <- seq(1,20,5)
v <- c("p","q")
rm(list=v)
ls()
rm(list=ls())
ls()
getOption("digits")
123.12345678
0.10000002
0.10000002 - 0.1
1234567.12345678
getOption("digits")
1e10 + 0.5
options(digits = 15)
1e10 + 0.5
options(digits = 7)
1e10 + 0.5
getOption("warn")
as.numeric("hello")
options(warn=-1)
as.numeric("hello")
f <- function(x,y){
as.numeric(x) + as.numeric(y)
}
options(warn=0)
f("hello","world")
options(warn=1)
f("hello","world")
options(warn=2)
f("hello","world")
options(warn=0)
exit()
quit
install.packages(c("ggplot2","shiny","knitr","dplyr","data.table"))
install.packages(c("ggplot2", "shiny", "knitr", "dplyr", "data.table"))
install.packages("devtools")
install.packages("devtools")
install_github("hadley/ggplot2")
library(moments)
install.packages("moments")
library(moments)
skewness(x)
moments::skewness(x)
sessionInfo()
moments::skewness(c(1,2,3,2,1))
sessionInfo()
library(moments)
sessionInfo()
search()
loaded <- require(moments)
loaded
reuire(moments)
if(!require(moments)){
install.packages("moments")
library(moments)
}
reuire(moments)
require(moments)
require(testPkg)
library(testPkg)
library(dplyr)
fun1 <- package1::some_function
unloadNamespace("moments")
skewness(c(1,2,3,2,1))
moments::skewness(c(1,2,3,2,1))
pkgs <- install.packages()
colnames(pkgs)
c("moments","testPkg") %in% install.packages()[,"Package"]
installed.packages()["moments","Version"]
packageVersion("moments")
packageVersion("moments") >= package_version("0.14")
packageVersion("moments") >="0.14"
2 -> x1
x3 <- x2 <- x1 <- 0
x3<- x2 <- x1 <- rnorm(1)
c(x1,x2,x3)
f <- function(input,data=NULL){
cat("input:\n")
print(input)
cat("data:\n")
print(data)
}
x <- c(1,2,3)
y <- c("some","text")
f(input=x)
x = c(1,2,3)
y = c("some","text")
f(input=x)
x <-c(1,2,3)
y <- c("some","text")
f(input <- x)
input
f(input = x,data=y)
f(input <- x,data <- y)
f(data=y,input=x)
f(data <- y,input <- x)
data <- y
input <- x
f(y,x)
students <- data.frame()
us_population <- data.frame()
sales.2015 <- data.frame()
some data <- data.frame()
_data <- data.frame()
Population(Millions) <-data.frame()
`some data` <- c(1,2,3)
`_data` <- c(4,5,6)
`Population(Millions)` <- c(city1=50,city2=60)
`some data`
`_data`
`Population(Millions)`
`Tom's secret function` <- function(a,d){
(a ^ 2 - d ^ 2) / (a ^ 2 + d ^ 2)
}
l1 <- list(`Group(A)` = rnorm(10),`Group(B)`=rnorm(10))
`Tom's secret function`(1,2)
l1$`Group(A)`
results <- data.frame(`Group(A)`=rnorm(10),`Group(B)`=rnorm(10))
results
colnames(results)
make.names(c("Population(before)","Population(after)"))
results <- data.frame(
ID = c(0,1,2,3,4),
Category = c("A","A","A","B","C"),
`Population(before)` = c(10,12,13,11,13),
`Population(after)` = c(12,13,16,12,12),
stringsAsFactors =FALSE,
check.names = FALSE)
results
colnames(results)
results$`Population(before)`
check_positive <- function(x){
if(x>0){
return(1)
}
}
check_positive(1)
check_positive(0)
check_sign <- function(x){
if(x>0){
return(1)
}else if (x < 0){
return(-1)
}else{
return(0)
}
}
check_sign(15)
check_sign(-3.5)
check_sign(0)
say_sign <- function(x){
if(x >0){
cat("The number is greater than 0")
}else if (x < 0){
cat("The number is less than 0")
}else{
cat("The number is 0")
}
}
say_sign(0)
say_sign(3)
say_sign(-9)
if (cond1) {
# do something
}
grade <- function(score){
if (score >= 90){
return("A")
}else if (score >=80){
return ("80")
}else if (score>=70){
return ("C")
}else if (score >= 60){
return("D")
}else{
return("F")
}
}
c(grade(65),grade(59),grade(87),grade(96))
grade2 <- function(score){
if(score >=60){
return("D")
}else if(score >= 70){
return("C")
}else if(score >=80){
return("B")
}else if (score >= 90){
return("A")
}else{
return("F")
}
}
c(grade2(65),grade2(59),grade2(87),grade2(96))
grade2 <- function(score){
if(score >=60 && score<70){
return("D")
}else if(score >= 70 && score < 80){
return("C")
}else if(score >=80 && score < 90){
return("B")
}else if (score >= 90){
return("A")
}else{
return("F")
}
}
c(grade2(65),grade2(59),grade2(87),grade2(96))
check_positive <- function(x) {
return(if (x > 0) {
1
})
}
check_positive <- function(x) {
return(if (x > 0) 1)
}
check_positive <- function(x) {
if (x > 0) 1
}
check_sign <- function(x) {
if (x > 0) 1 else if (x < 0) -1 else 0
}
say_grade <- function(name,score){
grade <- if(score >= 90) "A"
else if (score >= 80) "B"
else if(score >= 70) "C"
else if(score >= 60) "D"
else "F"
cat("The grade of",name,"is",grade)
}
say_grade("Betty",86)
say_grade <- function(name,score){
if(score >= 90) grade <- "A"
cat("Congratulations!\n")
else if (score >= 80) grade <- "B"
check_positive(c(1,-1,0))
num  <- c(1,2,3)
if (num>2){
cat("num > 2!")
}
any(c(TRUE,FALSE,FALSE))
any(c(FALSE,FALSE))
if (any(num>2)){
cat("num > 2!")
}
if(all(num>2)){
cat("num > 2!")
}else{
cat("Not all values are greater than 2")
}
check <- function(x){
if(all(x > 0)){
cat("All input values are positive")
}else{
cat("Some value are not positive")
}
}
check(c(1,2,3))
check(c(1,2,NA,-1))
check(c(1,2,NA))
ifelse(c(TRUE,FALSE<FALSE),c(1,2,3),c(4,5,6))
ifelse(c(TRUE,FALSE,FALSE),c(1,2,3),c(4,5,6))
check_positive2 <- function(x){
ifelse(x,1,0)
}
ifelse(TRUE,c(1,2),c(2,3))
if(TRUE) c(1,2) else c(2,3)
ifelse(c(TRUE,FALSE),c(1,2),c("a","b"))
switch(1,"x","y")
switch(2,"x","y")
switch("a",a=1,b=2)
switch("b",a=1,b=2)
switch("c",a=1,b=2,3)
switch_test <- function(x){
switch(x,
a=c(1,2,3),
b=list(x=0,y=1),
c={
cat("You choose c!\n")
list(name = "c",value="something")
})
}
switch_test("a")
switch_test("b")
switch_test("c")
for (var in vector) {
expr
}
for (i in 1:3){
cat("The value of i is",i,"\n")
}
for(word in c("hello","new","world")){
cat("The current word is",word,"\n")
}
loop_list <- list(
a = c(1,2,3),
b=c("a","b","c","d"))
for (item in loop_list){
cat("item:\n length:",length(item),"\n class:",class(item),"\n")
}
df <- data.frame(
x = c(1,2,3),
y = c("A","B","C"),
stringsAsFactors = FALSE)
for(col in df){
str(col)
}
for(i in 1:nrow(df)){
row <- df[i,]
cat("row",i,"\n")
str(row)
cat("\n")
}
s<- 0
for (i in 1:100){
s <- s + i
}
s
set.seed(123)
x <- numeric(1000)
for(t in 1:(length(x)-1)){
x[[t + 1]]<- x[[t]] + rnorm(1,0,0.1)
}
plot(x,type="s",main="Random walk",xlab="t")
set.seed(123)
x <- numeric(1000)
for(t in 1:(length(x)-1)){
x[[t + 1]]<- x[[t]] + rnorm(1,0,0.1)
}
plot(x,type="s",main="Random walk",xlab="t")
sum100 <- sum(1:100)
random_walk <- cumsum(rnorm(1000,0,0.1))
for(i in 1:5){
if(i == 3) break
cat("message",i,"\n")
}
m <- integer()
for(i in 1000:1100){
if((i ^ 2) %% 11 == (i ^ 3) %% 17){
m<-c(m,i)
}
}
m
for(i in 1000:1100){
if((i^2) %%11 == (i^3) %% 17) break
}
i
for(i in 1:5){
if(i == 3) next
cat("message",i,"\n")
}
x <- c("a","b","c")
combx <- character()
for(cl in x){
for(c2 in x){
combx <- c(combx,paste(c1,c2,sep=",",collapse = ""))
}
}
x <- c("a","b","c")
combx <- character()
for(c1 in x){
for(c2 in x){
combx <- c(combx,paste(c1,c2,sep=",",collapse = ""))
}
}
combx
combx2 <- character()
for(c1 in x){
for(c2 in x){
if(c1==c2)next
combx2 <- c(combx2,paste(c1,c2,sep=",",collapse = ""))
}
}
combx2
combn(c("a","b","c"),2)
expand.grid(n=c(1,2,3),x=c("a","b"))
while(x<=5){
cat(x,"",sep="")
x <- x+1
}
#使用while循环
x<- 0
while(x<=5) {
cat(x,"",sep="")
x <- x+1
}
x <- 0
while(TRUE){
x <- x + 1
if(x == 4) break
else if(x == 2) next
else cat(x,'\n')
}
res <- dbSendQuery(con,"SELECT * FROM table1 WHERE type=1")
x <- 0
repeat {
x <- x +1
if(x == 4) break
else if(x==2) next
else cat(x,'\n')
}
